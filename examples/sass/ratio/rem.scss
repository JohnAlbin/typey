// How to use Typey in a few lines of code...
// When...

// rem is your base unit...
$base-unit: rem;

// ...and you want to use ratios of font-size as line-height.
$line-height-method: ratio;

// Set your base font-size.
$base-font-size: 16px;

// Even though we are using $line-height-as-ratio we should still set the
// $base-line-height as it is used for margin and padding calculations.
$base-line-height: 20px;

// Build your font-size map.
$font-size: (
  s:  8px,
  m:  16px,
  l:  32px,
  xl: 64px,
);

// Import typey.
// Depending on your installation method (see README.md) this line will be
// slightly different.
@import "../../../stylesheets/typey";

html {
  font-family: $sans-serif-stack;
  // Within the HTML element we can use media queries and a custom
  // define-type-sizing delaration to change the base font size for different
  // screen sizes.
  @include define-type-sizing(12px);

  @media screen and (min-width: 600px) {
    @include define-type-sizing(14px, $line-height: false);
  }

  @media screen and (min-width: 800px) {
    @include define-type-sizing($line-height: false);
  }
}

h1 {
  // As we are using ratio line-heights we can just use the font-size() mixin when
  // the line-height ratio is the same as the $base-line-height-ratio.
  @include font-size(xl);
}

h2 {
  // We can manually override the ratio for certain elements.
  @include type-layout(l, 1.5);
}

h3 {
  // We can also just use px values if and when we need to. In this case the
  // line-height will print as a value in the base unit rather than a ratio.
  @include type-layout(22px, 28px);

  span {
    // If we want to then reset the line-height back to the base ratio we can just use
    // the type-layout() mixin without a second argument (it will always default
    // to the $base-line-height-ratio);
    @include type-layout(m);
  }

  em {
    // Alterntively we can set the ratio to anything we like.
    @include type-layout(m, 1.5);
  }
}

div {
  // As it doesnt quite make sense to express margin and padding as a ratio of
  // the font-size, all margin and padding mixins will use the $base-line-height.
  @include margin(1 0);
  @include padding(.5);
}

button {
  // There are also mixins for each individual margin and padding property.
  @include margin-top(1);
  @include margin-right(1);
  @include margin-bottom(1);
  @include margin-left(1);
  @include padding-top(1);
  @include padding-right(1);
  @include padding-bottom(1);
  @include padding-left(1);
}

article {
  // Add just like the font-size and line-height mixins you can specify values
  // in px too.
  @include padding(12px 10px 15px 5px);
  // Or a mixture of multiples of $base-line-height and px.
  @include margin(1 12px 2 30px);
}

strong,
b {
  // Define a font weight.
  font-weight: weight(bold);
}
