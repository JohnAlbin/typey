// Takes a sizing from the $font-size map (m, xl, xxl, etc) and convert it to
// the base unit. Alternatively convert a px font-size into the base unit.
//
// @param number|string $size
//   A size from the $font-size map or px value to be converted
// @param number|string $context
//   (optional) Only used if em is the $base-unit. The value of the parent
//   font-size if it differs from $base-font-size. Specified as a t-shirt size or
//   value in px.
//
// @return number
//   The selected font-size in $base-unit.
@function font-size($size, $context: $base-font-size) {
  @if type-of($size) == "string" {
    @return output-from-font-size-map($size, $context);
  }
  @if type-of($size) == "number" and not unitless($size) {
    @if unit($size) == px {
      @return convert-unit($size, $context);
    }
    @else {
      @error "font-size() only accepts keys from the $font-size map or values in px";
    }
  }
  @else {
    @error "font-size() only accepts keys from the $font-size map or values in px";
  }
}

// Define font-size (with fallback)
//
// @param number|string $size
//   A size from the $font-size map or px value to be converted
// @param number|string $context
//   (optional) Only used if em is the $base-unit. The value of the elements/parents
//   font-size if it differs from $base-font-size. Specified as a t-shirt size or
//   value in px.
@mixin font-size($size, $context: $base-font-size) {
  @if $base-unit == rem {
    @if $rem-fallback == true {
      @if type-of($size) == "string" {
        $map-size: map-get($font-size, $size);
        font-size: $map-size;
      }
      @if type-of($size) == "number" and not unitless($size) {
        @if unit($size) == px {
          font-size: $size;
        }
        @else {
          @error "font-size() only accepts keys from the $font-size map or values in px";
        }
      }
    }
  }
  font-size: font-size($size, $context);
}
