// Takes a sizing from the $font-size map (m, xl, xxl, etc) and convert it to 
// the base unit.
//
// @param string $size
//   A size from the $font-size map.
// @param number|string $context
//   (optional) Only used if em is the $base-unit. The value of the parent 
//   font-size if it differs from $base-font-size. Specified as a t-shirt size or
//   value in the same unit as the $font-size map.
//
// @return number
//   The selected font-size in $base-unit.
@function font-size($size, $context: $base-font-size) {
  @if type-of($size) == 'string' {
    $map-size: map-get($font-size, $size);
    @if $base-unit == px or $base-unit == pt {
      @return strip-unit($map-size) + $base-unit;
    }
    @if $base-unit == rem {
      @return ($map-size / $base-font-size) + $base-unit;
    }
    @if $base-unit == em {
      @if type-of($context) == 'string' {
        $context-map-size: map-get($font-size, $context);
        @return ($map-size / $context-map-size) + $base-unit;
      }
      @if type-of($context) == 'number' { 
        @return ($map-size / $context) + $base-unit;
      }
    }
  }
}

// Define font-size (with fallback).
//
// @param string $size
//   A size from the $font-size map.
// @param number|string $context
//   (optional) Only used if em is the $base-unit. The value of the elements/parents 
//   font-size if it differs from $base-font-size. Specified as a t-shirt size or
//   value in the same unit as the $font-size map.
@mixin font-size($size, $context: $base-font-size) {
  $map-size: map-get($font-size, $size);
  @if $base-unit == rem {
    font-size: $map-size;
  }
  font-size: font-size($size, $context);
}