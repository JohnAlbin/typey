// Define a type layout (font-size and line-height).
//
// @param number|string $size
//   A size from the $font-size map or a px value.
// @param number $x
//   Multiple of line height to be used or px value to be converted.
// @param number|string $context
//   (optional) Only used if em is the $base-unit. The value of the elements/parents
//   font-size if it differs from $base-font-size. Specified as a t-shirt size or
//   value in px.
@mixin type-layout($size, $x, $context: $size) {
  @if $base-unit == rem {
    @if $rem-fallback == true {
      @if type-of($size) == "string" {
        $map-size: map-get($font-size, $size);
        font-size: $map-size;
      }
      @if type-of($size) == "number" and not unitless($size) {
        $unit: unit($size);
        @if $unit == px {
          font-size: $size;
        }
        @else {
          @warn "font-size() only accepts values in px";
        }
      }
      @if type-of($x) == "number" and unitless($x) {
        line-height: $x * $base-line-height;
      }
      @if type-of($x) == "number" and not unitless($x) {
        line-height: $x;
      }
    }
  }
  @if $base-unit == rem or $base-unit == px {
    font-size: font-size($size);
    line-height: line-height($x);
  }
  @if $base-unit == em {
    @if $size == $context {
      font-size: font-size($size, $base-font-size);
      line-height: line-height($x, $size);
    }
    @else {
      font-size: font-size($size, $context);
      line-height: line-height($x, $size);
    }
  }
}
