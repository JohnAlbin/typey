// Generate a value to be used as line-height from either:
//   a) a multiple of $base-line-height
//   b) a static px or pt value
//
// Example usage with multiple:
//   line-height: line-height(2);
// Example usage with static value:
//   line-height: line-height(18px);
//
// @param number $x
//   Multiple of line height to be used or px/pt value to be converted.
// @param number|string $context
//   (optional) Only used if em is the $base-unit. The value of the elements/parents
//   font-size if it differs from $base-font-size. Specified as a t-shirt size or
//   value in the same unit as the $font-size map.
//
// @return number
//   The calculated height in $base-unit.
@function line-height($x, $context: $base-font-size) {
  @if type-of($x) == "number" and unitless($x) {
    @return output-from-multiplier($x, $context);
  }
  @if type-of($x) == "number" and not unitless($x) {
    @if unit($x) == unit($base-font-size) {
      @return convert-unit($x, $context);
    }
    @else {
      @error "line-height() only accepts values with the same unit as $base-font-size.";
    }
  }
  @else {
    @error "line-height() only accepts unitless numbers or values in px or pt.";
  }
}

// Define line-height (with fallback).
// This is only necessary to use if you want to provide fallbacks when you are
// using rem as $base-unit.
//
// @param number $x
//   Multiple of line height to be used or px/pt value to be converted.
// @param number|string $context
//   (optional) Only used if em is the $base-unit. The value of the elements/parents
//   font-size if it differs from $base-font-size. Specified as a t-shirt size or
//   value in the same unit as the $font-size map.
@mixin line-height($x, $context: $base-font-size) {
  @if $base-unit == rem {
    @if $rem-fallback == true {
      @if type-of($x) == "number" and unitless($x) {
        line-height: $x * $base-line-height;
      }
      @if type-of($x) == "number" and not unitless($x) {
        line-height: $x;
      }
    }
  }
  line-height: line-height($x, $context);
}
