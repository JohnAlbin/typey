// Generate a value to be used as line-height (or margin, padding, etc) from 
// either: a) a multiple of $base-line-height or b) a static px or pt value.
//
// Example usage with multiple:
//   line-height: line-height(2);
// Example usage with static value:
//   line-height: line-height(18px);
//
// @param number $x
//   Multiple of line height to be used or px/pt value to be converted.
// @param number $context
//   (optional) Only used if em is the $base-unit. The value of the elements 
//   font-size if it differs from $base-font-size. Specified as a t-shirt size or
//   value in the same unit as the $font-size map.
//
// @return number
//   The caculated height in $base-unit.
@function line-height($x, $context: $base-font-size) {
  @if type-of($x) == 'number' and unitless($x) {
    @if $base-unit == px or $base-unit == pt {
      @return strip-unit($x * $base-line-height) + $base-unit;
    }
    @if $base-unit == rem {
      @return ($x * $base-line-height) / $base-font-size + $base-unit;
    }
    @if $base-unit == em {
      @if type-of($context) == 'string' {
        $context-map-size: map-get($font-size, $context);
        @return ($x * $base-line-height) / $context-map-size + $base-unit;
      }
      @if type-of($context) == 'number' { 
        @return ($x * $base-line-height) / $context + $base-unit;
      }
    }
  }
  @if type-of($x) == 'number' and not unitless($x) {
    @if unit($x) == px or unit($x) == pt {
      @return convert-unit($x, $context);
    }
  }
}

// Define line-height (with fallback). 
// This is only necessary to use if you want to provide fallbacks when you are
// using rem as $base-unit.
//
// @param number $x
//   Multiple of line height to be used or px/pt value to be converted.
// @param number $context
//   (optional) Only used if em is the $base-unit. The value of the elements 
//   font-size if it differs from $base-font-size. Specified as a t-shirt size or
//   value in the same unit as the $font-size map.
@mixin line-height($x, $context: $base-font-size) {
  @if $base-unit == rem {
    @if type-of($x) == 'number' and unitless($x) {
      line-height: $x * $base-line-height;
    }
    @if type-of($x) == 'number' and not unitless($x) {  
      line-height: $x;
    }
  }
  line-height: line-height($x, $context);
}