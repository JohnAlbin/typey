{"version":3,"file":"rhythm.css","sources":["rhythm.scss","../../../stylesheets/typey/_font-stacks.scss","../../../stylesheets/_typey.scss","../../../stylesheets/typey/functions/_helpers.scss","../../../stylesheets/typey/functions/_validators.scss","../../../stylesheets/typey/functions/_em-calculators.scss","../../../stylesheets/typey/functions/_outputters.scss","../../../stylesheets/typey/functions/_sizers.scss","../../../stylesheets/typey/functions/_extras.scss","../../../stylesheets/typey/functions/_depreciated.scss","../../already-imported:/Users/jack/Projects/typey/stylesheets/typey/_font-stacks.scss","../../../stylesheets/typey/_defaults.scss","../../../stylesheets/typey/mixins/_debug.scss","../../../stylesheets/typey/mixins/_define-type-sizing.scss","../../../stylesheets/typey/mixins/_font-size.scss","../../../stylesheets/typey/mixins/_line-height.scss","../../../stylesheets/typey/mixins/_spacing.scss","../../../stylesheets/typey/mixins/_typeface.scss","../../../stylesheets/typey/mixins/_typeset.scss","../../../stylesheets/typey/mixins/_type-layout.scss","../../node_modules/breakpoint-sass/stylesheets/_breakpoint.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_settings.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_context.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_helpers.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_parsers.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/_query.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/_single.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/single/_default.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/_double.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/double/_default-pair.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/double/_double-string.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/double/_default.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/_triple.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/triple/_default.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/_resolution.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/parsers/resolution/_resolution.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_no-query.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_respond-to.scss","../../node_modules/breakpoint-sass/stylesheets/breakpoint/_legacy-settings.scss","_base.scss"],"sourcesContent":["// Set defaults so they are easy to compute (in your head).\n$base-font-size:           16px;\n$base-line-height:         24px;\n\n$line-height-method:       rhythm;\n\n$font-size: (\n  s: 12px,\n  m: 16px,\n  l: 24px,\n  xl:36px\n);\n\n@import \"typey/font-stacks\";\n\n$typefaces: (\n  serif: $serif-stack .1px,\n  sans-serif: (\n    font-family: $sans-serif-stack,\n    letter-spacing: -.5px,\n    weight: bold,\n    case: uppercase\n  )\n);\n\n$typestyles: (\n  heading-1: (\n    font-size: xl,\n    line-height: 2\n  ),\n  heading-2: l 2,\n  heading-3: (\n    font-size: m,\n    line-height: 1,\n    case: lowercase\n  )\n);\n\n$typey-debug: true;\n$typey-debug-color: #D9B29C;\n\n@import \"typey\";\n@import \"breakpoint\";\n\n@import \"base\";\n\nhtml {\n  @include define-type-sizing;\n  @include typeface(serif);\n}\n\nh1, h2, h3 {\n  @include typeface(sans-serif);\n}\n\n// Tests for rem\n$base-unit: rem;\n.rem {\n  h1 {\n    @include typeset(heading-1);\n    @include margin-bottom(1);\n  }\n\n  h2 {\n    @include typeset(heading-2);\n    @include margin(2 0 1);\n  }\n\n  h3 {\n    @include typeset(heading-3);;\n    @include margin(2 0 1);\n  }\n\n  p {\n    @include margin-bottom(1);\n    @include typey-debug-grid;\n  }\n\n  .intro {\n    @include type-layout(18px, 1);\n  }\n}\n\n// Tests for em\n$base-unit: em;\n.em {\n  h1 {\n    @include typeset(heading-1);\n    @include margin-bottom(1, xl);\n  }\n\n  h2 {\n    @include typeset(heading-2);\n    @include margin(2 0 1, l);\n  }\n\n  h3 {\n    @include typeset(heading-3);;\n    @include margin(2 0 1);\n  }\n\n  p {\n    @include margin-bottom(1);\n    @include typey-debug-grid;\n  }\n\n  .intro {\n    @include type-layout(18px, 1);\n    @include margin-bottom(1, 18px);\n  }\n}\n\n// Tests for em\n$base-unit: px;\n.px {\n  h1 {\n    @include typeset(heading-1);\n    @include margin-bottom(1);\n  }\n\n  h2 {\n    @include typeset(heading-2);\n    @include margin(2 0 1);\n  }\n\n  h3 {\n    @include typeset(heading-3);;\n    @include margin(2 0 1);\n  }\n\n  p {\n    @include margin-bottom(1);\n    @include typey-debug-grid;\n  }\n\n  .intro {\n    @include type-layout(18px, 1);\n  }\n}\n","// Three standard do-all stacks.\n$serif-stack:         \"Calisto MT\", \"Book Antiqua\", serif !default;\n$sans-serif-stack:    \"Helvetica Neue\", Helvetica, sans-serif !default;\n$monospace-stack:     Consolas, \"Lucida Console\", monospace, monospace !default;\n","@import \"typey/functions/helpers\";\n@import \"typey/functions/validators\";\n@import \"typey/functions/em-calculators\";\n@import \"typey/functions/outputters\";\n@import \"typey/functions/sizers\";\n@import \"typey/functions/extras\";\n@import \"typey/functions/depreciated\";\n@import \"typey/font-stacks\";\n@import \"typey/defaults\";\n@import \"typey/mixins/debug\";\n@import \"typey/mixins/define-type-sizing\";\n@import \"typey/mixins/font-size\";\n@import \"typey/mixins/line-height\";\n@import \"typey/mixins/spacing\";\n@import \"typey/mixins/typeface\";\n@import \"typey/mixins/typeset\";\n@import \"typey/mixins/type-layout\";\n","// Output a number in the $base-unit.\n//\n// @param number $number\n//   The number (without unit) to output.\n//\n// @return number\n//   The number with the base unit\n@function typey-output-in-base-unit($number) {\n  @if $number == 0 {\n    @return 0;\n  }\n  @if $base-unit == rem {\n    @return $number * 1rem;\n  }\n  @if $base-unit == px {\n    @return $number * 1px;\n  }\n  @if $base-unit == em {\n    @return $number * 1em;\n  }\n}\n\n// Output a number in a chosen unit.\n//\n// @param number $number\n//   The number (without unit) to output.\n// @param string $unit\n//   (optional) The unit to output, either em, px or rem.\n//\n// @return number\n//   The number with the base unit\n@function typey-output-in-unit($number, $unit: $base-unit) {\n  @if $number == 0 {\n    @return 0;\n  }\n  @if $unit == rem {\n    @return $number * 1rem;\n  }\n  @if $unit == px {\n    @return $number * 1px;\n  }\n  @if $unit == em {\n    @return $number * 1em;\n  }\n}\n\n// Remove the unit from a number.\n//\n// @param number $number\n//   The number (with unit) to convert. Allowed units: any\n//\n// @return number\n//   The number without the unit.\n@function typey-strip-unit($number) {\n  @if type-of($number) == \"number\" and not unitless($number) {\n    @return $number / ($number * 0 + 1);\n  }\n  @return $number;\n}\n","// Takes a value and checks to ensure it's expressed correctly then returns\n// the type.\n//\n// @param number|string|list $x\n//   A multiple of $base-line-height.\n//   A px value.\n//   A size from the $font-size map.\n//   A space seperated list container multiples and/or px values.\n//\n// @return string\n//   multiplier, px, font-size, list\n@function typey-check-value($x) {\n  @if type-of($x) == \"number\" {\n    @if unitless($x) {\n      @return \"multiplier\";\n    }\n    @if not unitless($x) {\n      @if unit($x) == px {\n        @return \"px\";\n      }\n      @else {\n        @error \"All units must be expressed in px\";\n      }\n    }\n  }\n  @if type-of($x) == \"string\" {\n    @if $x == \"auto\" {\n      @return \"auto\";\n    }\n    @if map-has-key($font-size, $x) {\n      @return \"font-size\";\n    }\n    @else {\n      @error \"'#{$x}' not found in $font-size map\";\n    }\n  }\n  @if type-of($x) == \"list\" {\n    @if list-separator($x) == space {\n      @each $value in $x {\n        @if type-of($value) == \"number\" or $value == \"auto\" {\n          @if type-of($value) == \"number\" {\n            @if not unitless($value) and unit($value) != px {\n              @error \"All units must be expressed in px\";\n            }\n          }\n        }\n        @else {\n          @error \"Values specified inside lists must be a number or 'auto'\";\n        }\n      }\n      @return \"list\";\n    }\n    @else {\n      @error \"All lists must use a space as their seperator\";\n    }\n  }\n  @else {\n    @return type-of($x);\n  }\n}\n\n// Takes a value and validates it against a specified type.\n//\n// @param number|string|list $x\n//   A multiple of $base-line-height.\n//   A px value.\n//   A size from the $font-size map.\n//   A space seperated list container multiples and/or px values.\n// @param string|list $allowed-types\n//   Either multiplier, px, font-size, list, or a comibation specified in a list.\n//\n// @return string\n//   The values type.\n@function typey-validator($x, $allowed-types) {\n  $type: typey-check-value($x);\n  @if index($allowed-types, $type) != null {\n    @return $type;\n  }\n  @else {\n    @error \"'#{$type}' is not a valid type for this function (allowed types are: #{$allowed-types})\";\n  }\n}\n","// Calculate relative sizing for em when a px value is used.\n//\n// @param number $number\n//   The px value\n// @param number|string $context\n//   The relative value to perform the calculation.\n//\n// @return number\n//   The calculated value in the base unit.\n@function calculate-em-px($x, $context) {\n  $allowed-types: \"font-size\", \"px\";\n  $type: typey-validator($context, $allowed-types);\n  @if $type == \"font-size\" {\n    $context-map-size: map-get($font-size, $context);\n    @return typey-output-in-unit(($x / $context-map-size), em);\n  }\n  @if $type == \"px\" {\n    @return typey-output-in-unit(($x / $context), em);\n  }\n}\n\n// Calculate relative sizing for em when a multiplier is used.\n//\n// @param number $number\n//   Multiple of line height to be used.\n// @param number|string $context\n//   The relative value to perform the calculation.\n//\n// @return number\n//   The calculated value in the base unit.\n@function calculate-em-multiplier($x, $context) {\n  $allowed-types: \"font-size\", \"px\";\n  $type: typey-validator($context, $allowed-types);\n  @if $type == \"font-size\" {\n    $context-map-size: map-get($font-size, $context);\n    @return typey-output-in-unit(($x * $base-line-height) / $context-map-size, em);\n  }\n  @if $type == \"px\" {\n    @return typey-output-in-unit(($x * $base-line-height) / $context, em);\n  }\n}\n","// Take a px value and output converted value.\n//\n// @param number $number\n//   A px value to convert.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the elements/parents\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n//\n// @return number\n//   The number converted to the base unit.\n@function output-from-px($number, $context: $base-font-size) {\n  @if $base-unit == rem {\n    @return typey-output-in-base-unit(($number / $base-font-size));\n  }\n  @if $base-unit == px {\n    @return typey-output-in-base-unit(typey-strip-unit($number));\n  }\n  @if $base-unit == em {\n    @return calculate-em-px($number, $context);\n  }\n}\n\n// Take a key from the $font-size map and output converted value.\n//\n// @param string $size\n//   A size from the $font-size map.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the parent\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n//\n// @return number\n//   The selected font-size in $base-unit.\n@function output-from-font-size-map($size, $context: $base-font-size) {\n  $map-size: map-get($font-size, $size);\n  @if $base-unit == rem {\n    @return typey-output-in-base-unit(($map-size / $base-font-size));\n  }\n  @if $base-unit == px {\n    @return typey-output-in-base-unit(typey-strip-unit($map-size));\n  }\n  @if $base-unit == em {\n    @return calculate-em-px($map-size, $context);\n  }\n}\n\n// Take a line-height multipler and output converted value.\n//\n// @param number $number\n//   Multiple of line height to be used.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the elements/parents\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n//\n// @return number\n//   The value of the line-height multiple converted to the base unit.\n@function output-from-multiplier($x, $context: $base-font-size) {\n  @if $base-unit == rem {\n    @return typey-output-in-base-unit(($x * $base-line-height) / $base-font-size);\n  }\n  @if $base-unit == px {\n    @return typey-output-in-base-unit(typey-strip-unit($x * $base-line-height));\n  }\n  @if $base-unit == em {\n    @return calculate-em-multiplier($x, $context);\n  }\n}\n\n// Take a line-height ratio and output as em.\n//\n// @param number $ratio\n//   Multiple of the $font-size to be used.\n// @param number|string $context\n//  (optional) used to ensure function outputs the ratio regardless of whether\n//  it is the same as the $base-line-height-ratio.\n//\n// @return number\n//   The ratio in em.\n@function output-from-ratio($ratio: $base-line-height-ratio) {\n  @return $ratio;\n}\n","// Takes a sizing from the $font-size map (m, xl, xxl, etc) and convert it to\n// the base unit. Alternatively convert a px font-size into the base unit.\n//\n// @param number|string $size\n//   A size from the $font-size map or px value to be converted\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the parent\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n//\n// @return number\n//   The selected font-size in $base-unit.\n@function font-size($size, $context: $base-font-size) {\n  $allowed-types: \"font-size\", \"px\";\n  $type: typey-validator($size, $allowed-types);\n  @if $type == \"font-size\" {\n    @return output-from-font-size-map($size, $context);\n  }\n  @if $type == \"px\" {\n    @return output-from-px($size, $context);\n  }\n}\n\n// Generate a value to be used as line-height from either:\n//   a) a multiple of $base-line-height\n//   b) a static px value\n//   c) a ratio of the font-size\n//\n// Example usage with multiple:\n//   line-height: line-height(2);\n// Example usage with static value:\n//   line-height: line-height(18px);\n// Example usage with ratio:\n//   line-height: line-height(1.5);\n//\n// @param number $x\n//   Multiple of $base-line-height to be used, px value to be converted, or ratio of\n//   font-size.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the\n//   elements/parents font-size if it differs from $base-font-size.\n//   Specified as a t-shirt size or value in px.\n// @return number\n//   The calculated height in $base-unit.\n@function line-height($x, $context: $base-font-size) {\n  $allowed-types: \"multiplier\", \"px\";\n  $type: typey-validator($x, $allowed-types);\n  @if $type == \"multiplier\" {\n    @if ($line-height-method == \"ratio\") {\n      @return output-from-ratio($x);\n    }\n    @else {\n      @return output-from-multiplier($x, $context);\n    }\n  }\n  @if $type == \"px\" {\n    @return output-from-px($x, $context);\n  }\n}\n\n// Generate a value to be used as some form of height or spacing from either:\n//   a) a multiple of $base-line-height\n//   b) a static px value\n//\n// Example usage with multiple:\n//   height: spacing(2);\n// Example usage with static value:\n//   margin-bottom: spacing(18px);\n//\n// @param number $x\n//   Multiple of $base-line-height to be used or px value to be converted.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the elements/parents\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n//\n// @return number\n//   The calculated spacing in $base-unit.\n@function spacing($x, $context: $base-font-size) {\n  $allowed-types: \"multiplier\", \"px\", \"auto\";\n  $type: typey-validator($x, $allowed-types);\n  @if $type == \"multiplier\" {\n    @return output-from-multiplier($x, $context);\n  }\n  @if $type == \"px\" {\n    @return output-from-px($x, $context);\n  }\n  @if $type == \"auto\" {\n    @return auto;\n  }\n}\n","// Retrieve a font weight.\n//\n// @param string $weight\n//   A weight from the $font-weight map.\n//\n// @return string\n//   The selected font-weight.\n@function weight($weight) {\n  @if type-of($weight) == \"string\" {\n    @if map-has-key($font-weight, $weight) {\n      @return map-get($font-weight, $weight);\n    }\n    @else {\n      @error \"'#{$weight}' not found in $font-weight map\";\n    }\n  }\n  @else {\n    @error \"Weight specified for weight() is not a string\";\n  }\n}\n\n// Extend a font by adding a web-safe stack to it.\n//\n// Example usage:\n//   $new-font-stack: extend-font-stack(\"Open sans\", $sans-serif-stack);\n//\n// @param string $font\n//   The name of the font. Use inverted commas if there are spaces in the font\n//   name. i.e \"Open sans\"\n// @param list $font-stack\n//   The font stack variable to extend.\n@function extend-font-stack($font, $font-stack) {\n  @return join($font, $font-stack, $separator: comma);\n}\n","// DEPRECIATED FUNCTIONS\n// The names of these functions have been refined and namespaced (above) to avoid\n// potential confusion with functions from other libraries.\n\n// (Depreciated) Output a number in the $base-unit..\n//\n// @param string $weight\n//   A weight from the $font-weight map.\n//\n// @return string\n//   The selected font-weight.\n@function output-unit($number) {\n  @warn \"output-unit() is depreciated. Please use typey-output-in-base-unit() instead\";\n  @return typey-output-in-base-unit($number);\n}\n\n// (Depreciated) Remove the unit from a number.\n//\n// @param number $number\n//   The number (with unit) to convert. Allowed units: any\n//\n// @return number\n//   The number without the unit.\n@function strip-unit($number) {\n  @warn \"strip-unit() is depreciated. Please use typey-strip-unit() instead\";\n  @return typey-strip-unit($number);\n}\n\n// (Depreciated) Convert px to the $base-unit.\n//\n// @param number $number\n//   The number (with unit) to convert. Allowed units: px\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the elements/parents\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n//\n// @return number\n//   The number converted to the base unit.\n@function convert-unit($number, $context: $base-font-size) {\n  @warn \"convert-unit() is depreciated. Please use output-from-px() instead\";\n  @return output-from-px($number, $context);\n}\n\n// (Depreciated) Retrieve a font weight.\n//\n// @param string $weight\n//   A weight from the $font-weight map.\n//\n// @return string\n//   The selected font-weight.\n@function font-weight($weight) {\n  @warn \"font-weight() is depreciated. Please use weight() instead\";\n  @return weight($weight);\n}\n","","// The browser font size default. No need to change this.\n// Allowed units: px\n$browser-font-size:        16px !default;\n\n// Allowed units: rem, em or px\n$base-unit:                rem !default;\n\n// The base font size will be used for most calculations involving font-size.\n// Allowed units: px\n$base-font-size:           16px !default;\n\n// The base line height will be used for most calculations involving height.\n// Allowed units: px\n$base-line-height:         24px !default;\n\n// The method to calculate line-height. Allowed values: rhythm or ratio.\n// Rhytm uses a vertical rhythm approach where line-height is specified as\n// a multiple of the $base-line-height.\n// Ratio uses a ratio approach where line-height is specified as a ratio\n// of the elements font-size.\n$line-height-method:       rhythm !default;\n\n// The default ratio of line-height to font-size.\n$base-line-height-ratio:   1.5 !default;\n\n// By default we will provide fallbacks when rem is the base unit.\n$rem-fallback:             true !default;\n\n// By default, when rem or em are the base unit we will output a print suitable\n// media query with the define-type-sizing() mixin. This will take care of all\n// print media type sizing effortlessly.\n$auto-print-sizing:        true !default;\n\n// The pt font-size to be used with the print media query when\n// $auto-print-sizing is enabled.\n// Allowed units: pt\n$print-font-size:          12pt !default;\n\n// Default font sizes\n// Once you redefine the $font-size map it will overwrite all sizes here.\n// Allowed units: px\n$font-size: (\n  xxxl:                    60px,\n  xxl:                     46px,\n  xl:                      32px,\n  l:                       24px,\n  m:                       16px,\n  s:                       14px,\n  xs:                      12px\n) !default;\n\n// Default font weights\n// This map and accompanying function help provide granular control over\n// setting and retrieving static font weights.\n$font-weight: (\n  bold:                    700,\n  normal:                  400,\n  lighter:                 200\n) !default;\n\n// Declare typefaces\n// These can use any key you like, and allow you to set global letter-spacing,\n// weight and case for font-families. You can then use the\n// font-family mixin to embed your font families anywhere you like.\n//\n// Each key in the $typefaces map can either be a keyed map of settings\n// using any combination of the keys below, or it can be a shorthand list\n// of each property value. When using shorthand it doesn't matter what order\n// each value is arranged in, but best practice is to do it in the order:\n// [font-family] [letter-spacing] [weight] [case]\n//\n// @setting list font-family\n//   Any standard CSS font-family. Use typey pre-written stacks or roll your own.\n// @setting number letter-spacing\n//   CSS letter-spacing. Specified as a px value when font-size is the\n//   $base-font-size.\n// @setting string weight\n//   A key from the $font-weight map. Only specify this if you want a consistant\n//   font-weight used accross the board with this typeface.\n// @setting string case\n//   A value for CSS text-transform. Only specify this if you want a consistant\n//   case used accross the board with this typeface.\n$typefaces: () !default;\n\n// Declare typestyles\n// These can use any key you like, and allow you to set an easily reusable type\n// style. They can be as simple as a font-size and line-height, or can go on\n// to encompass a full range of css type properties.\n//\n// Each key in the $typestyles map can either be a keyed map of settings\n// using any combination of the keys below, or it can be a shorthand list\n// of each property value. When using shorthand for $typestyles, the first value\n// must always be font-size. After that it doesn't matter what order each value\n// is arranged in, but best practice is to do it in the order:\n// [font-size] [line-height] [weight] [case]\n//\n// @setting number|string font-size\n//   A size from the $font-size map or px value to be converted\n// @setting number $x line-height\n//   Multiple of line height, ratio or px value to be converted.\n// @setting string weight\n//   A key from the $font-weight map.\n// @setting string case\n//   A value for CSS text-transform.\n$typestyles: () !default;\n\n// Debug grid\n// Shows horizontal lines for each elements line height.\n$typey-debug:              false !default;\n\n// Debug grid coloring\n$typey-debug-color:        #4affff !default;\n\n// Warnings for $base-unit.\n@if $base-unit != px and $base-unit != rem and $base-unit != em {\n  @error \"$base-unit must be one of the following unit types: rem, em or px\";\n}\n\n// Warnings for $base-font-size and $base-line-height.\n@if unit($base-font-size) != px {\n  @error \"$base-font-size must be in px\";\n}\n@if unit($base-line-height) != px {\n  @error \"$base-line-height must be in px\";\n}\n\n// Warnings for $print-font-size.\n@if unit($print-font-size) != pt {\n  @error \"$print-font-size must be in pt\";\n}\n\n// Warnings for $font-size.\n@each $key, $size in $font-size {\n  @if unit($size) != px {\n    @error \"Size '#{$key}' in $font-size map is not specified in px\";\n  }\n}\n\n// Warnings for $font-weight.\n$typey-text-transform-properties: none capitalize uppercase lowercase initial inherit;\n@each $property in $typey-text-transform-properties {\n  @if map-has-key($font-weight, $property) {\n    @warn \"'#{$property}' used in $font-weight map is a potential value of the text-transform property and will conflict when using typey shorthand\";\n  }\n}\n\n// Warnings for $typefaces.\n@each $key, $typeface in $typefaces {\n  @if type-of($typeface) != \"map\" and type-of($typeface) != \"list\" {\n    @error \"Typeface '#{$key}' in $typefaces map must be a keyed map or a shorthand list in the format: [font-family] [letter-spacing] [weight] [case]\";\n  }\n}\n\n// Warnings for $typestyles.\n@each $key, $typestyle in $typestyles {\n  @if type-of($typestyle) != \"map\" and type-of($typestyle) != \"list\" {\n    @error \"Typestyle '#{$key}' in $typestyles map must be a keyed map or a shorthand list in the format: [font-size] [line-height] [weight] [case]\";\n  }\n  @if type-of($typestyle) == \"list\" {\n    @each $value in $typestyle {\n      @if index($typestyle, $value) == 1 {\n        $allowed-types: \"font-size\", \"px\";\n        $type: typey-check-value($value);\n        @if index($allowed-types, $type) == null {\n          @error \"Incorrect shorthand format used in '#{$key}' in $typestyles map: [font-size] must appear first\";\n        }\n      }\n    }\n  }\n}\n","// Output a horizontal grid to help with debugging typography.\n//\n// @param number $line-height\n//   Multiple of line height to be used, line-height ratio or px value to be converted.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the\n//   elements/parents font-size if it differs from $base-font-size.\n//   Specified as a t-shirt size or value in px.\n// @param string $color\n//   (optional) Use a custom grid color.\n@mixin typey-debug-grid($line-height: $base-line-height, $context: $base-font-size, $color: $typey-debug-color) {\n  @if $typey-debug == true {\n    $allowed-types: \"multiplier\", \"px\";\n    $type: typey-validator($line-height, $allowed-types);\n    $grid-height: 0;\n    @if $line-height-method == \"rhythm\" {\n      $grid-height: line-height($line-height, $context);\n    }\n    @if $line-height-method == \"ratio\" {\n      @if $line-height == $base-line-height {\n        $grid-height: line-height($base-line-height-ratio, $context) * 1em;\n      }\n      @else {\n        $grid-height: line-height($line-height, $context) * 1em;\n      }\n    }\n\n    position: relative;\n    background-image: repeating-linear-gradient(180deg, $color, $color 1px, transparent 1px, transparent $grid-height);\n\n    &:after {\n      content: \"\";\n      position: absolute;\n      bottom: -1px;\n      left: 0;\n      height: 1px;\n      width: 100%;\n      background-color: $color;\n    }\n  }\n}\n","// Define defaults (use this in the HTML element).\n//\n// @param number $size\n//   (optional) The font-size. Use to set to anything other than $base-font-size.\n// @param number $line-height\n//   (optional) The line-height. Use to set to anything other than $base-line-height.\n//   Set to a ratio when $line-height-as-ratio is true. Will default to $base-line-height-ratio.\n//   Set to false if you do not want to change a ratio of line-height already set.\n@mixin define-type-sizing($size: $base-font-size, $line-height: $base-line-height) {\n  @if $base-unit == rem or $base-unit == em {\n    font-size: $size / $browser-font-size * 100%;\n  }\n  @if $base-unit == px {\n    font-size: $size;\n  }\n\n  @if $line-height != false {\n    @if $line-height-method == \"ratio\" {\n      @if $line-height == $base-line-height {\n        $line-height: $base-line-height-ratio;\n      }\n      line-height: $line-height;\n    }\n    @else {\n      @if $base-unit == rem or $base-unit == em {\n        // In the html element, rem means relative to browser default font size; em means relative to html's font size.\n        line-height: calculate-em-px($line-height, $size);\n      }\n      @if $base-unit == px {\n        line-height: $line-height;\n      }\n    }\n  }\n\n  @if $auto-print-sizing == true {\n    @if $base-unit == rem or $base-unit == em {\n      @media print {\n        font-size: $print-font-size;\n      }\n    }\n    @else {\n      @warn \"As you are not using a relative base unit (rem or em) automatic print media sizing will not work. Set $auto-print-sizing to false to hide this warning\"\n    }\n  }\n}\n","// Define font-size (with fallback)\n//\n// @param number|string $size\n//   A size from the $font-size map or px value to be converted\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the elements/parents\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n@mixin font-size($size, $context: $base-font-size) {\n  $allowed-types: \"font-size\", \"px\";\n  $type: typey-validator($size, $allowed-types);\n  @if $base-unit == rem {\n    @if $rem-fallback == true {\n      @if $type == \"font-size\" {\n        $map-size: map-get($font-size, $size);\n        font-size: $map-size;\n      }\n      @if $type == \"px\" {\n        font-size: $size;\n      }\n    }\n  }\n  font-size: font-size($size, $context);\n}\n","// Define line-height (with fallback).\n//\n// @param number $x\n//   Multiple of line height to be used or px value to be converted.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the\n//   elements/parents font-size if it differs from $base-font-size.\n//   Specified as a t-shirt size or value in px.\n@mixin line-height($x, $context: $base-font-size) {\n  $allowed-types: \"multiplier\", \"px\";\n  $type: typey-validator($x, $allowed-types);\n  @if $base-unit == rem and $line-height-method == \"rhythm\" {\n    @if $rem-fallback == true {\n      @if $type == \"multiplier\" {\n        line-height: $x * $base-line-height;\n      }\n      @if $type == \"px\" {\n        line-height: $x;\n      }\n    }\n  }\n  line-height: line-height($x, $context);\n}\n","// Define spacing (with fallbacks).\n//\n// @param string $type\n//   The type of spacing: margin, padding, margin-top, etc.\n// @param number|list|string $spacing\n//   Multiple of $base-line-height to be used or px value to be converted.\n//   Can be a SASS list using the same parameters as the CSS margin property:\n//   i.e. top right bottom left, 1 0 2 0.\n//   Can also be the string \"auto\" when used as margin.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the elements/parents\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n@mixin spacing($property, $spacing, $context: $base-font-size) {\n  $allowed-types: \"multiplier\", \"px\", \"list\";\n  $type: typey-validator($spacing, $allowed-types);\n\n  $px-fallback-list: ();\n  $converted-list: ();\n\n  @each $x in $spacing {\n    @if $base-unit == rem {\n      $allowed-types: \"multiplier\", \"px\", \"auto\";\n      $type: typey-validator($x, $allowed-types);\n      @if $type == \"multiplier\" {\n        $spacing: $x * $base-line-height;\n        $px-fallback-list: join($px-fallback-list, $spacing, $separator: space);\n      }\n      @if $type == \"px\" {\n        $px-fallback-list: join($px-fallback-list, $x, $separator: space);\n      }\n      @if $type == \"auto\" {\n        $px-fallback-list: join($px-fallback-list, $x, $separator: space);\n      }\n    }\n    $spacing: spacing($x, $context);\n    $converted-list: join($converted-list, $spacing, $separator: space);\n  }\n\n  @if $base-unit == rem {\n    @if $rem-fallback == true {\n      #{$property}: $px-fallback-list;\n    }\n  }\n  #{$property}: $converted-list;\n}\n\n// Wrapper mixins for various spacing properties.\n// These can be used to provide easily sized spacing in the base unit.\n//\n// @param number|list|string $x\n//   Multiple of $base-line-height to be used or px value to be converted.\n//   Can be a SASS list using the same parameters as the CSS margin property:\n//   i.e. top right bottom left, 1 0 2 0.\n//   Can also be the string \"auto\" when used as margin.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the elements/parents\n//   font-size if it differs from $base-font-size. Specified as a t-shirt size or\n//   value in px.\n@mixin margin($x, $context: $base-font-size) {\n  @include spacing(margin, $x, $context);\n}\n@mixin margin-top($x, $context: $base-font-size) {\n  @include spacing(margin-top, $x, $context);\n}\n@mixin margin-bottom($x, $context: $base-font-size) {\n  @include spacing(margin-bottom, $x, $context);\n}\n@mixin margin-left($x, $context: $base-font-size) {\n  @include spacing(margin-left, $x, $context);\n}\n@mixin margin-right($x, $context: $base-font-size) {\n  @include spacing(margin-right, $x, $context);\n}\n@mixin padding($x, $context: $base-font-size) {\n  @include spacing(padding, $x, $context);\n}\n@mixin padding-top($x, $context: $base-font-size) {\n  @include spacing(padding-top, $x, $context);\n}\n@mixin padding-bottom($x, $context: $base-font-size) {\n  @include spacing(padding-bottom, $x, $context);\n}\n@mixin padding-left($x, $context: $base-font-size) {\n  @include spacing(padding-left, $x, $context);\n}\n@mixin padding-right($x, $context: $base-font-size) {\n  @include spacing(padding-right, $x, $context);\n}\n","// Embed a typeface.\n//\n// @param string $typeface\n//   A font family from the $typefaces map.\n@mixin typeface($typeface) {\n  $typeface-name: $typeface;\n  $typeface: map-get($typefaces, $typeface);\n\n  $font-family: false;\n  $letter-spacing: false;\n  $weight: false;\n  $case: false;\n\n  // Assign values to variables when $typeface is a keyed map.\n  @if type-of($typeface) == \"map\" {\n    @if map-has-key($typeface, font-family) {\n      $font-family: map-get($typeface, font-family);\n    }\n    @if map-has-key($typeface, letter-spacing) {\n      $letter-spacing: map-get($typeface, letter-spacing);\n    }\n    @if map-has-key($typeface, weight) {\n      $weight: map-get($typeface, weight);\n    }\n    @if map-has-key($typeface, case) {\n      $case: map-get($typeface, case);\n    }\n  }\n\n  // Assign values to variables when $typeface is shorthand.\n  @if type-of($typeface) == \"list\" {\n    @if (list-separator($typeface) == \"comma\") {\n      // This shorthand is just a list of fonts.\n      $font-family: $typeface;\n    }\n    @else {\n      @each $value in $typeface {\n        // This is a font-family.\n        @if type-of($value) == \"list\" {\n          $font-family: $value;\n        }\n        // This is a letter-spacing value.\n        @if type-of($value) == \"number\" {\n          $letter-spacing: $value;\n        }\n        // This is a font-weight value.\n        @if map-has-key($font-weight, $value) {\n          $weight: $value;\n        }\n        // This is a case value.\n        @if type-of($value) == \"string\" and not(map-has-key($font-weight, $value)) {\n          $case: $value;\n        }\n      }\n    }\n  }\n\n  // Output properties.\n  @if $font-family {\n    font-family: $font-family;\n  }\n  @else {\n    @error \"Typeface '#{$typeface-name}' does not have a font-family\";\n  }\n  @if $letter-spacing {\n    @if ($letter-spacing == 0) {\n      letter-spacing: 0;\n    }\n    @else {\n      letter-spacing: calculate-em-px($letter-spacing, $base-font-size);\n    }\n  }\n  @if $weight {\n    font-weight: weight($weight);\n  }\n  @if $case {\n    text-transform: $case;\n  }\n}\n","// Typeset your type.\n//\n// @param string $typestyle\n//   A type style from the $typestyles map.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the\n//   elements/parents font-size if it differs from $base-font-size.\n//   Specified as a t-shirt size or value in px.\n@mixin typeset($typestyle, $context: $base-font-size) {\n  $typestyle: map-get($typestyles, $typestyle);\n\n  $font-size: false;\n  $line-height: false;\n  $weight: false;\n  $case: false;\n\n  // Assign values to variables when $typestyle is a keyed map.\n  @if type-of($typestyle) == \"map\" {\n    @if map-has-key($typestyle, font-size) {\n      $font-size: map-get($typestyle, font-size);\n    }\n    @if map-has-key($typestyle, line-height) {\n      $line-height: map-get($typestyle, line-height);\n    }\n    @if map-has-key($typestyle, weight) {\n      $weight: map-get($typestyle, weight);\n    }\n    @if map-has-key($typestyle, case) {\n      $case: map-get($typestyle, case);\n    }\n  }\n\n  // Assign values to variables when $typestyle is shorthand.\n  @if type-of($typestyle) == \"list\" {\n    @each $value in $typestyle {\n      // The first value is always font-size.\n      @if index($typestyle, $value) == 1 {\n        $font-size: $value;\n      }\n      // This is a line-height value.\n      @if type-of($value) == \"number\" and not(index($typestyle, $value) == 1) {\n        $line-height: $value;\n      }\n      // This is a font-weight value.\n      @if map-has-key($font-weight, $value) {\n        $weight: $value;\n      }\n      // This is a case value.\n      @if type-of($value) == \"string\" and not(index($typestyle, $value) == 1) {\n        $case: $value;\n      }\n    }\n  }\n\n  // Output properties.\n  @if $font-size {\n    @include font-size($font-size, $context);\n  }\n  @if $line-height {\n    @include typey-debug-grid($line-height, $font-size);\n    @include line-height($line-height, $font-size);\n  }\n  @else {\n    // Using default line-height so set debug grid accordingly.\n    @include typey-debug-grid($base-line-height, $font-size);\n  }\n  @if $weight {\n    font-weight: weight($weight);\n  }\n  @if $case {\n    text-transform: $case;\n  }\n}\n","// Define a type layout (font-size and line-height).\n//\n// @param number|string $size\n//   A size from the $font-size map or a px value.\n// @param number $line-height\n//   Multiple of line height to be used or px value to be converted.\n// @param number|string $context\n//   (optional) Only used if em is the $base-unit. The value of the\n//   elements/parents font-size if it differs from $base-font-size.\n//   Specified as a t-shirt size or value in px.\n@mixin type-layout($size, $line-height, $context: $base-font-size) {\n  @include font-size($size, $context);\n  @include line-height($line-height, $size);\n  @include typey-debug-grid($line-height, $size);\n}\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","//////////////////////////////\n// Has Setting\n//////////////////////////////\n@function breakpoint-has($setting) {\n  @if map-has-key($breakpoint, $setting) {\n    @return true;\n  }\n  @else {\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Get Settings\n//////////////////////////////\n@function breakpoint-get($setting) {\n  @if breakpoint-has($setting) {\n    @return map-get($breakpoint, $setting);\n  }\n  @else {\n    @return map-get($Breakpoint-Settings, $setting);\n  }\n}\n\n//////////////////////////////\n// Set Settings\n//////////////////////////////\n@function breakpoint-set($setting, $value) {\n  @if (str-index($setting, '-') or str-index($setting, '_')) and str-index($setting, ' ') == null {\n    @warn \"Words in Breakpoint settings should be separated by spaces, not dashes or underscores. Please replace dashes and underscores between words with spaces. Settings will not work as expected until changed.\";\n  }\n  $breakpoint: map-merge($breakpoint, ($setting: $value)) !global;\n  @return true;\n}\n\n@mixin breakpoint-change($setting, $value) {\n  $breakpoint-change: breakpoint-set($setting, $value);\n}\n\n@mixin breakpoint-set($setting, $value) {\n  @include breakpoint-change($setting, $value);\n}\n\n@mixin bkpt-change($setting, $value) {\n  @include breakpoint-change($setting, $value);\n}\n@mixin bkpt-set($setting, $value) {\n  @include breakpoint-change($setting, $value);\n}\n\n//////////////////////////////\n// Remove Setting\n//////////////////////////////\n@function breakpoint-reset($settings...) {\n  @if length($settings) == 1 {\n    $settings: nth($settings, 1);\n  }\n\n  @each $setting in $settings {\n    $breakpoint: map-remove($breakpoint, $setting) !global;\n  }\n  @return true;\n}\n\n@mixin breakpoint-reset($settings...) {\n  $breakpoint-reset: breakpoint-reset($settings);\n}\n\n@mixin bkpt-reset($settings...) {\n  $breakpoint-reset: breakpoint-reset($settings);\n}","//////////////////////////////\n// Private Breakpoint Variables\n//////////////////////////////\n$private-breakpoint-context-holder: ();\n$private-breakpoint-query-count: 0 !default;\n\n//////////////////////////////\n// Breakpoint Has Context\n// Returns whether or not you are inside a Breakpoint query\n//////////////////////////////\n@function breakpoint-has-context() {\n  @if length($private-breakpoint-query-count) {\n    @return true;\n  }\n  @else {\n    @return false;\n  }\n}\n\n//////////////////////////////\n// Breakpoint Get Context\n// $feature: Input feature to get it's current MQ context. Returns false if no context\n//////////////////////////////\n@function breakpoint-get-context($feature) {\n  @if map-has-key($private-breakpoint-context-holder, $feature) {\n    $get: map-get($private-breakpoint-context-holder, $feature);\n    // Special handling of no-query from get side so /false/ prepends aren't returned\n    @if $feature == 'no-query' {\n      @if type-of($get) == 'list' and length($get) > 1 and nth($get, 1) == false {\n        $get: nth($get, length($get));\n      }\n    }\n    @return $get;\n  }\n  @else {\n    @if breakpoint-has-context() and $feature == 'media' {\n      @return breakpoint-get('default media');\n    }\n    @else {\n      @return false;\n    }\n  }\n}\n\n//////////////////////////////\n// Private function to set context\n//////////////////////////////\n@function private-breakpoint-set-context($feature, $value) {\n  @if $value == 'monochrome' {\n    $feature: 'monochrome';\n  }\n\n  $current: map-get($private-breakpoint-context-holder, $feature);\n  @if $current and length($current) == $private-breakpoint-query-count {\n    @warn \"You have already queried against `#{$feature}`. Unexpected things may happen if you query against the same feature more than once in the same `and` query. Breakpoint is overwriting the current context with `#{$value}`\";\n  }\n\n  @if not map-has-key($private-breakpoint-context-holder, $feature) {\n    $v-holder: ();\n    @for $i from 1 to $private-breakpoint-query-count {\n      @if $feature == 'media' {\n        $v-holder: append($v-holder, breakpoint-get('default media'));\n      }\n      @else {\n        $v-holder: append($v-holder, false);\n      }\n    }\n    $v-holder: append($v-holder, $value);\n    $private-breakpoint-context-holder: map-merge($private-breakpoint-context-holder, ($feature: $v-holder)) !global;\n  }\n  @else {\n    $v-holder: map-get($private-breakpoint-context-holder, $feature);\n    $length: length($v-holder);\n    @for $i from $length to $private-breakpoint-query-count - 1 {\n      @if $feature == 'media' {\n        $v-holder: append($v-holder, breakpoint-get('default media'));\n      }\n      @else {\n        $v-holder: append($v-holder, false);\n      }\n    }\n    $v-holder: append($v-holder, $value);\n    $private-breakpoint-context-holder: map-merge($private-breakpoint-context-holder, ($feature: $v-holder)) !global;\n  }\n\n  @return true;\n}\n\n//////////////////////////////\n// Private function to reset context\n//////////////////////////////\n@mixin private-breakpoint-reset-contexts {\n  $private-breakpoint-context-holder: () !global;\n  $private-breakpoint-query-count: 0 !global;\n}","//////////////////////////////\n// Converts the input value to Base EMs\n//////////////////////////////\n@function breakpoint-to-base-em($value) {\n  $value-unit: unit($value);\n\n  // Will convert relative EMs into root EMs.\n  @if breakpoint-get('base font size') and type-of(breakpoint-get('base font size')) == 'number' and $value-unit == 'em' {\n    $base-unit: unit(breakpoint-get('base font size'));\n\n    @if $base-unit == 'px' or $base-unit == '%' or $base-unit == 'em' or $base-unit == 'pt' {\n      @return base-conversion($value) / base-conversion(breakpoint-get('base font size')) * 1em;\n    }\n    @else {\n      @warn '#{breakpoint-get(\\'base font size\\')} is not set in valid units for font size!';\n      @return false;\n    }\n  }\n  @else {\n    @return base-conversion($value);\n  }\n}\n\n@function base-conversion($value) {\n  $unit: unit($value);\n\n  @if $unit == 'px' {\n    @return $value / 16px * 1em;\n  }\n  @else if $unit == '%' {\n    @return $value / 100% * 1em;\n  }\n  @else if $unit == 'em' {\n    @return $value;\n  }\n  @else if $unit == 'pt' {\n    @return $value / 12pt * 1em;\n  }\n  @else {\n    @return $value;\n//    @warn 'Everything is terrible! What have you done?!';\n  }\n}\n\n//////////////////////////////\n// Returns whether the feature can have a min/max pair\n//////////////////////////////\n$breakpoint-min-max-features: 'color',\n                              'color-index',\n                              'aspect-ratio',\n                              'device-aspect-ratio',\n                              'device-height',\n                              'device-width',\n                              'height',\n                              'monochrome',\n                              'resolution',\n                              'width';\n\n@function breakpoint-min-max($feature) {\n  @each $item in $breakpoint-min-max-features {\n    @if $feature == $item {\n      @return true;\n    }\n  }\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature can have a string value\n//////////////////////////////\n$breakpoint-string-features:  'orientation',\n                              'scan',\n                              'color',\n                              'aspect-ratio',\n                              'device-aspect-ratio',\n                              'pointer',\n                              'luminosity';\n\n@function breakpoint-string-value($feature) {\n  @each $item in $breakpoint-string-features {\n    @if breakpoint-min-max($item) {\n      @if $feature == 'min-#{$item}' or $feature == 'max-#{$item}' {\n        @return true;\n      }\n    }\n    @else if $feature == $item {\n      @return true;\n    }\n  }\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature is a media type\n//////////////////////////////\n$breakpoint-media-types:  'all',\n                          'braille',\n                          'embossed',\n                          'handheld',\n                          'print',\n                          'projection',\n                          'screen',\n                          'speech',\n                          'tty',\n                          'tv';\n\n@function breakpoint-is-media($feature) {\n  @each $media in $breakpoint-media-types {\n    @if ($feature == $media) or ($feature == 'not #{$media}') or ($feature == 'only #{$media}') {\n      @return true;\n    }\n  }\n\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature can stand alone\n//////////////////////////////\n$breakpoint-single-string-features: 'color',\n                                    'color-index',\n                                    'grid',\n                                    'monochrome';\n\n@function breakpoint-single-string($feature) {\n  @each $item in $breakpoint-single-string-features {\n    @if $feature == $item {\n      @return true;\n    }\n  }\n  @return false;\n}\n\n//////////////////////////////\n// Returns whether the feature\n//////////////////////////////\n@function breakpoint-is-resolution($feature) {\n  $resolutions: 'device-pixel-ratio', 'dpr';\n\n  @if breakpoint-get('transform resolutions') {\n    $resolutions: append($resolutions, 'resolution');\n  }\n\n  @each $reso in $resolutions {\n    @if index($feature, $reso) or index($feature, 'min-#{$reso}') or index($feature, 'max-#{$reso}') {\n      @return true;\n    }\n  }\n\n  @return false;\n}\n","//////////////////////////////\n// Import Parser Pieces\n//////////////////////////////\n@import \"parsers/query\";\n@import \"parsers/single\";\n@import \"parsers/double\";\n@import \"parsers/triple\";\n@import \"parsers/resolution\";\n\n$Memo-Exists: function-exists(memo-get) and function-exists(memo-set);\n\n//////////////////////////////\n// Breakpoint Function\n//////////////////////////////\n@function breakpoint($query, $contexts...) {\n  $run: true;\n  $return: ();\n\n  // Grab the Memo Output if Memoization can be a thing\n  @if $Memo-Exists {\n    $return: memo-get(breakpoint, breakpoint $query $contexts);\n\n    @if $return != null {\n      $run: false;\n    }\n  }\n\n  @if not $Memo-Exists or $run {\n    // Internal Variables\n    $query-string: '';\n    $query-fallback: false;\n    $return: ();\n\n    // Reserve Global Private Breakpoint Context\n    $holder-context: $private-breakpoint-context-holder;\n    $holder-query-count: $private-breakpoint-query-count;\n\n    // Reset Global Private Breakpoint Context\n    $private-breakpoint-context-holder: () !global;\n    $private-breakpoint-query-count: 0 !global;\n\n\n    // Test to see if it's a comma-separated list\n    $or-list: if(list-separator($query) == 'comma', true, false);\n\n\n    @if ($or-list == false and breakpoint-get('legacy syntax') == false) {\n      $query-string: breakpoint-parse($query);\n    }\n    @else {\n      $length: length($query);\n\n      $last: nth($query, $length);\n      $query-fallback: breakpoint-no-query($last);\n\n      @if ($query-fallback != false) {\n        $length: $length - 1;\n      }\n\n      @if (breakpoint-get('legacy syntax') == true) {\n        $mq: ();\n\n        @for $i from 1 through $length {\n          $mq: append($mq, nth($query, $i), comma);\n        }\n\n        $query-string: breakpoint-parse($mq);\n      }\n      @else {\n        $query-string: '';\n        @for $i from 1 through $length {\n          $query-string: $query-string + if($i == 1, '', ', ') + breakpoint-parse(nth($query, $i));\n        }\n      }\n    }\n\n    $return: ('query': $query-string,\n        'fallback': $query-fallback,\n        'context holder': $private-breakpoint-context-holder,\n        'query count': $private-breakpoint-query-count\n    );\n    @if length($contexts) > 0 and nth($contexts, 1) != false {\n      @if $query-fallback != false {\n        $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n      }\n      $context-map: ();\n      @each $context in $contexts {\n        $context-map: map-merge($context-map, ($context: breakpoint-get-context($context)));\n      }\n      $return: map-merge($return, (context: $context-map));\n    }\n\n    // Reset Global Private Breakpoint Context\n    $private-breakpoint-context-holder: () !global;\n    $private-breakpoint-query-count: 0 !global;\n\n    @if $Memo-Exists {\n      $holder: memo-set(breakpoint, breakpoint $query $contexts, $return);\n    }\n  }\n\n  @return $return;\n}\n\n//////////////////////////////\n// General Breakpoint Parser\n//////////////////////////////\n@function breakpoint-parse($query) {\n  // Increase number of 'and' queries\n  $private-breakpoint-query-count: $private-breakpoint-query-count + 1 !global;\n\n  // Set up Media Type\n  $query-print: '';\n\n  $force-all: ((breakpoint-get('force all media type') == true) and (breakpoint-get('default media') == 'all'));\n  $empty-media: true;\n  @if ($force-all == true) or (breakpoint-get('default media') != 'all') {\n    // Force the print of the default media type if (force all is true and default media type is all) or (default media type is not all)\n    $query-print: breakpoint-get('default media');\n    $empty-media: false;\n  }\n\n\n  $query-resolution: false;\n\n  $query-holder: breakpoint-parse-query($query);\n\n\n\n  // Loop over each parsed out query and write it to $query-print\n  $first: true;\n\n  @each $feature in $query-holder {\n    $length: length($feature);\n\n    // Parse a single feature\n    @if ($length == 1) {\n      // Feature is currently a list, grab the actual value\n      $feature: nth($feature, 1);\n\n      // Media Type must by convention be the first item, so it's safe to flat override $query-print, which right now should only be the default media type\n      @if (breakpoint-is-media($feature)) {\n        @if ($force-all == true) or ($feature != 'all') {\n          // Force the print of the default media type if (force all is true and default media type is all) or (default media type is not all)\n          $query-print: $feature;\n          $empty-media: false;\n\n          // Set Context\n          $context-setter: private-breakpoint-set-context(media, $query-print);\n        }\n      }\n      @else {\n        $parsed: breakpoint-parse-single($feature, $empty-media, $first);\n        $query-print: '#{$query-print} #{$parsed}';\n        $first: false;\n      }\n    }\n    // Parse a double feature\n    @else if ($length == 2) {\n      @if (breakpoint-is-resolution($feature) != false) {\n        $query-resolution: $feature;\n      }\n      @else {\n        $parsed: null;\n        // If it's a string/number pair,\n        // we check to see if one is a single-string value,\n        // then we parse it as a normal double\n        $alpha: nth($feature, 1);\n        $beta: nth($feature, 2);\n        @if breakpoint-single-string($alpha) or breakpoint-single-string($beta) {\n          $parsed: breakpoint-parse-single($alpha, $empty-media, $first);\n          $query-print: '#{$query-print} #{$parsed}';\n          $first: false;\n          $parsed: breakpoint-parse-single($beta, $empty-media, $first);\n          $query-print: '#{$query-print} #{$parsed}';\n        }\n        @else {\n          $parsed: breakpoint-parse-double($feature, $empty-media, $first);\n          $query-print: '#{$query-print} #{$parsed}';\n          $first: false;\n        }\n      }\n    }\n    // Parse a triple feature\n    @else if ($length == 3) {\n      $parsed: breakpoint-parse-triple($feature, $empty-media, $first);\n      $query-print: '#{$query-print} #{$parsed}';\n      $first: false;\n    }\n\n  }\n\n  @if ($query-resolution != false) {\n    $query-print: breakpoint-build-resolution($query-print, $query-resolution, $empty-media, $first);\n  }\n\n  // Loop through each feature that's been detected so far and append 'false' to the the value list to increment their counters\n  @each $f, $v in $private-breakpoint-context-holder {\n    $v-holder: $v;\n    $length: length($v-holder);\n    @if length($v-holder) < $private-breakpoint-query-count {\n      @for $i from $length to $private-breakpoint-query-count {\n        @if $f == 'media' {\n          $v-holder: append($v-holder, breakpoint-get('default media'));\n        }\n        @else {\n          $v-holder: append($v-holder, false);\n        }\n      }\n    }\n    $private-breakpoint-context-holder: map-merge($private-breakpoint-context-holder, ($f: $v-holder)) !global;\n  }\n\n  @return $query-print;\n}\n","@function breakpoint-parse-query($query) {\n  // Parse features out of an individual query\n  $feature-holder: ();\n  $query-holder: ();\n  $length: length($query);\n\n  @if $length == 2 {\n    // If we've got a string/number, number/string, check to see if it's a valid string/number pair or two singles\n    @if (type-of(nth($query, 1)) == 'string' and type-of(nth($query, 2)) == 'number') or (type-of(nth($query, 1)) == 'number' and type-of(nth($query, 2)) == 'string') {\n\n      $number: '';\n      $value: '';\n\n      @if type-of(nth($query, 1)) == 'string' {\n        $number: nth($query, 2);\n        $value: nth($query, 1);\n      }\n      @else {\n        $number: nth($query, 1);\n        $value: nth($query, 2);\n      }\n\n      // If the string value can be a single value, check to see if the number passed in is a valid input for said single value. Fortunately, all current single-value options only accept unitless numbers, so this check is easy.\n      @if breakpoint-single-string($value) {\n        @if unitless($number) {\n          $feature-holder: append($value, $number, space);\n          $query-holder: append($query-holder, $feature-holder, comma);\n          @return $query-holder;\n        }\n      }\n      // If the string is a media type, split the query\n      @if breakpoint-is-media($value) {\n        $query-holder: append($query-holder, nth($query, 1));\n        $query-holder: append($query-holder, nth($query, 2));\n        @return $query-holder;\n      }\n      // If it's not a single feature, we're just going to assume it's a proper string/value pair, and roll with it.\n      @else {\n        $feature-holder: append($value, $number, space);\n        $query-holder: append($query-holder, $feature-holder, comma);\n        @return $query-holder;\n      }\n\n    }\n    // If they're both numbers, we assume it's a double and roll with that\n    @else if (type-of(nth($query, 1)) == 'number' and type-of(nth($query, 2)) == 'number') {\n      $feature-holder: append(nth($query, 1), nth($query, 2), space);\n      $query-holder: append($query-holder, $feature-holder, comma);\n      @return $query-holder;\n    }\n    // If they're both strings and neither are singles, we roll with that.\n    @else if (type-of(nth($query, 1)) == 'string' and type-of(nth($query, 2)) == 'string') {\n      @if not breakpoint-single-string(nth($query, 1)) and not breakpoint-single-string(nth($query, 2)) {\n        $feature-holder: append(nth($query, 1), nth($query, 2), space);\n        $query-holder: append($query-holder, $feature-holder, comma);\n        @return $query-holder;\n      }\n    }\n  }\n  @else if $length == 3 {\n    // If we've got three items and none is a list, we check to see\n    @if type-of(nth($query, 1)) != 'list' and type-of(nth($query, 2)) != 'list' and type-of(nth($query, 3)) != 'list' {\n      // If none of the items are single string values and none of the values are media values, we're good.\n      @if (not breakpoint-single-string(nth($query, 1)) and not breakpoint-single-string(nth($query, 2)) and not breakpoint-single-string(nth($query, 3))) and  ((not breakpoint-is-media(nth($query, 1)) and not breakpoint-is-media(nth($query, 2)) and not breakpoint-is-media(nth($query, 3)))) {\n        $feature-holder: append(nth($query, 1), nth($query, 2), space);\n        $feature-holder: append($feature-holder, nth($query, 3), space);\n        $query-holder: append($query-holder, $feature-holder, comma);\n        @return $query-holder;\n      }\n      // let's check to see if the first item is a media type\n      @else if breakpoint-is-media(nth($query, 1)) {\n        $query-holder: append($query-holder, nth($query, 1));\n        $feature-holder: append(nth($query, 2), nth($query, 3), space);\n        $query-holder: append($query-holder, $feature-holder);\n        @return $query-holder;\n      }\n    }\n  }\n\n  // If it's a single item, or if it's not a special case double or triple, we can simply return the query.\n  @return $query;\n}\n","//////////////////////////////\n// Import Pieces\n//////////////////////////////\n@import \"single/default\";\n\n@function breakpoint-parse-single($feature, $empty-media, $first) {\n  $parsed: '';\n  $leader: '';\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  // If it's a single feature that can stand alone, we let it\n  @if (breakpoint-single-string($feature)) {\n    $parsed: $feature;\n    // Set Context\n    $context-setter: private-breakpoint-set-context($feature, $feature);\n  }\n  // If it's not a stand alone feature, we pass it off to the default handler.\n  @else {\n    $parsed: breakpoint-parse-default($feature);\n  }\n\n  @return $leader + '(' + $parsed + ')';\n}\n","@function breakpoint-parse-default($feature) {\n  $default: breakpoint-get('default feature');\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context($default, $feature);\n\n  @if (breakpoint-get('to ems') == true) and (type-of($feature) == 'number') {\n    @return '#{$default}: #{breakpoint-to-base-em($feature)}';\n  }\n  @else {\n    @return '#{$default}: #{$feature}';\n  }\n}\n","//////////////////////////////\n// Import Pieces\n//////////////////////////////\n@import \"double/default-pair\";\n@import \"double/double-string\";\n@import \"double/default\";\n\n@function breakpoint-parse-double($feature, $empty-media, $first) {\n  $parsed: '';\n  $leader: '';\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  $first: nth($feature, 1);\n  $second: nth($feature, 2);\n\n  // If we've got two numbers, we know we need to use the default pair because there are no media queries that has a media feature that is a number\n  @if type-of($first) == 'number' and type-of($second) == 'number' {\n    $parsed: breakpoint-parse-default-pair($first, $second);\n  }\n  // If they are both strings, we send it through the string parser\n  @else if type-of($first) == 'string' and type-of($second) == 'string' {\n    $parsed: breakpoint-parse-double-string($first, $second);\n  }\n  // If it's a string/number pair, we parse it as a normal double\n  @else {\n    $parsed: breakpoint-parse-double-default($first, $second);\n  }\n\n  @return $leader + $parsed;\n}\n","@function breakpoint-parse-default-pair($first, $second) {\n  $default: breakpoint-get('default pair');\n  $min: '';\n  $max: '';\n\n  // Sort into min and max\n  $min: min($first, $second);\n  $max: max($first, $second);\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context(min-#{$default}, $min);\n  $context-setter: private-breakpoint-set-context(max-#{$default}, $max);\n\n  // Make them EMs if need be\n  @if (breakpoint-get('to ems') == true) {\n    $min: breakpoint-to-base-em($min);\n    $max: breakpoint-to-base-em($max);\n  }\n\n  @return '(min-#{$default}: #{$min}) and (max-#{$default}: #{$max})';\n}\n","@function breakpoint-parse-double-string($first, $second) {\n  $feature: '';\n  $value: '';\n\n  // Test to see which is the feature and which is the value\n  @if (breakpoint-string-value($first) == true) {\n    $feature: $first;\n    $value: $second;\n  }\n  @else if (breakpoint-string-value($second) == true) {\n    $feature: $second;\n    $value: $first;\n  }\n  @else {\n    @warn \"Neither #{$first} nor #{$second} is a valid media query name.\";\n  }\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context($feature, $value);\n\n  @return '(#{$feature}: #{$value})';\n}","@function breakpoint-parse-double-default($first, $second) {\n  $feature: '';\n  $value: '';\n\n  @if type-of($first) == 'string' {\n    $feature: $first;\n    $value: $second;\n  }\n  @else {\n    $feature: $second;\n    $value: $first;\n  }\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context($feature, $value);\n\n  @if (breakpoint-get('to ems') == true) {\n    $value: breakpoint-to-base-em($value);\n  }\n\n  @return '(#{$feature}: #{$value})'\n}\n","//////////////////////////////\n// Import Pieces\n//////////////////////////////\n@import \"triple/default\";\n\n@function breakpoint-parse-triple($feature, $empty-media, $first) {\n  $parsed: '';\n  $leader: '';\n\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  // separate the string features from the value numbers\n  $string: null;\n  $numbers: null;\n  @each $val in $feature {\n    @if type-of($val) == string {\n      $string: $val;\n    }\n    @else {\n      @if type-of($numbers) == 'null' {\n        $numbers: $val;\n      }\n      @else {\n        $numbers: append($numbers, $val);\n      }\n    }\n  }\n\n  $parsed: breakpoint-parse-triple-default($string, nth($numbers, 1), nth($numbers, 2));\n\n  @return $leader + $parsed;\n\n}\n","@function breakpoint-parse-triple-default($feature, $first, $second) {\n\n  // Sort into min and max\n  $min: min($first, $second);\n  $max: max($first, $second);\n\n  // Set Context\n  $context-setter: private-breakpoint-set-context(min-#{$feature}, $min);\n  $context-setter: private-breakpoint-set-context(max-#{$feature}, $max);\n\n  // Make them EMs if need be\n  @if (breakpoint-get('to ems') == true) {\n    $min: breakpoint-to-base-em($min);\n    $max: breakpoint-to-base-em($max);\n  }\n\n  @return '(min-#{$feature}: #{$min}) and (max-#{$feature}: #{$max})';\n}\n","@import \"resolution/resolution\";\n\n@function breakpoint-build-resolution($query-print, $query-resolution, $empty-media, $first) {\n  $leader: '';\n  // If we're forcing\n  @if not ($empty-media) or not ($first) {\n    $leader: 'and ';\n  }\n\n  @if breakpoint-get('transform resolutions') and $query-resolution {\n    $resolutions: breakpoint-make-resolutions($query-resolution);\n    $length: length($resolutions);\n    $query-holder: '';\n\n    @for $i from 1 through $length {\n      $query: '#{$query-print} #{$leader}#{nth($resolutions, $i)}';\n      @if $i == 1 {\n        $query-holder: $query;\n      }\n      @else {\n        $query-holder: '#{$query-holder}, #{$query}';\n      }\n    }\n\n    @return $query-holder;\n  }\n  @else {\n    // Return with attached resolution\n    @return $query-print;\n  }\n}\n","@function breakpoint-make-resolutions($resolution) {\n  $length: length($resolution);\n\n  $output: ();\n\n  @if $length == 2 {\n    $feature: '';\n    $value: '';\n\n    // Find which is number\n    @if type-of(nth($resolution, 1)) == 'number' {\n      $value: nth($resolution, 1);\n    }\n    @else {\n      $value: nth($resolution, 2);\n    }\n\n    // Determine min/max/standard\n    @if index($resolution, 'min-resolution') {\n      $feature: 'min-';\n    }\n    @else if index($resolution, 'max-resolution') {\n      $feature: 'max-';\n    }\n\n    $standard: '(#{$feature}resolution: #{$value})';\n\n    // If we're not dealing with dppx,\n    @if unit($value) != 'dppx' {\n      $base: 96dpi;\n      @if unit($value) == 'dpcm' {\n        $base: 243.84dpcm;\n      }\n      // Write out feature tests\n      $webkit: '';\n      $moz: '';\n      $webkit: '(-webkit-#{$feature}device-pixel-ratio: #{$value / $base})';\n      $moz: '(#{$feature}-moz-device-pixel-ratio: #{$value / $base})';\n      // Append to output\n      $output: append($output, $standard, space);\n      $output: append($output, $webkit, space);\n      $output: append($output, $moz, space);\n    }\n    @else {\n      $webkit: '';\n      $moz: '';\n      $webkit: '(-webkit-#{$feature}device-pixel-ratio: #{$value / 1dppx})';\n      $moz: '(#{$feature}-moz-device-pixel-ratio: #{$value / 1dppx})';\n      $fallback: '(#{$feature}resolution: #{$value / 1dppx * 96dpi})';\n      // Append to output\n      $output: append($output, $standard, space);\n      $output: append($output, $webkit, space);\n      $output: append($output, $moz, space);\n      $output: append($output, $fallback, space);\n    }\n\n  }\n\n  @return $output;\n}\n","@function breakpoint-no-query($query) {\n  @if type-of($query) == 'list' {\n    $keyword: nth($query, 1);\n\n    @if type-of($keyword) == 'string' and ($keyword == 'no-query' or $keyword == 'no query' or $keyword == 'fallback') {\n      @return nth($query, 2);\n    }\n    @else {\n      @return false;\n    }\n  }\n  @else {\n    @return false;\n  }\n}\n","////////////////////////\n// Default the Breakpoints variable\n////////////////////////\n$breakpoints: () !default;\n$BREAKPOINTS: () !default;\n\n////////////////////////\n// Respond-to API Mixin\n////////////////////////\n@mixin respond-to($context, $no-query: false) {\n  @if length($breakpoints) > 0 and length($BREAKPOINTS) == 0 {\n    @warn \"In order to avoid variable namespace collisions, we have updated the way to add breakpoints for respond-to. Please change all instances of `$breakpoints: add-breakpoint()` to `@include add-breakpoint()`. The `add-breakpoint()` function will be deprecated in a future release.\";\n    $BREAKPOINTS: $breakpoints !global;\n    $breakpoints: () !global;\n  }\n\n  @if type-of($BREAKPOINTS) != 'map' {\n    // Just in case someone writes gibberish to the $breakpoints variable.\n    @warn \"Your breakpoints aren't a map! `respond-to` expects a map. Please check the value of $BREAKPOINTS variable.\";\n    @content;\n  }\n  @else if map-has-key($BREAKPOINTS, $context) {\n    @include breakpoint(map-get($BREAKPOINTS, $context), $no-query) {\n      @content;\n    }\n  }\n  @else if not map-has-key($BREAKPOINTS, $context) {\n    @warn \"`#{$context}` isn't a defined breakpoint! Please add it using `$breakpoints: add-breakpoint(`#{$context}`, $value);`\";\n    @content;\n  }\n  @else {\n    @warn \"You haven't created any breakpoints yet! Make some already! `@include add-breakpoint($name, $bkpt)`\";\n    @content;\n  }\n}\n\n//////////////////////////////\n// Add Breakpoint to Breakpoints\n// TODO: Remove function in next release\n//////////////////////////////\n@function add-breakpoint($name, $bkpt, $overwrite: false) {\n  $output: ($name: $bkpt);\n\n  @if length($breakpoints) == 0 {\n    @return $output;\n  }\n  @else {\n    @if map-has-key($breakpoints, $name) and $overwrite != true {\n      @warn \"You already have a breakpoint named `#{$name}`, please choose another breakpoint name, or pass in `$overwrite: true` to overwrite the previous breakpoint.\";\n      @return $breakpoints;\n    }\n    @else if not map-has-key($breakpoints, $name) or $overwrite == true {\n      @return map-merge($breakpoints, $output);\n    }\n  }\n}\n\n@mixin add-breakpoint($name, $bkpt, $overwrite: false) {\n  $output: ($name: $bkpt);\n\n  @if length($BREAKPOINTS) == 0 {\n    $BREAKPOINTS: $output !global;\n  }\n  @else {\n    @if map-has-key($BREAKPOINTS, $name) and $overwrite != true {\n      @warn \"You already have a breakpoint named `#{$name}`, please choose another breakpoint name, or pass in `$overwrite: true` to overwrite the previous breakpoint.\";\n      $BREAKPOINTS: $BREAKPOINTS !global;\n    }\n    @else if not map-has-key($BREAKPOINTS, $name) or $overwrite == true {\n      $BREAKPOINTS: map-merge($BREAKPOINTS, $output) !global;\n    }\n  }\n}\n\n@function get-breakpoint($name: false) {\n  @if $name == false {\n    @return $BREAKPOINTS;\n  }\n  @else {\n    @return map-get($BREAKPOINTS, $name);\n  }\n}\n","@mixin legacy-settings-warning {\n  $legacyVars: (\n    'default-media': 'default media',\n    'default-feature': 'default feature',\n    'force-media-all': 'force all media type',\n    'to-ems': 'to ems',\n    'resolutions': 'transform resolutions',\n    'no-queries': 'no queries',\n    'no-query-fallbacks': 'no query fallbacks',\n    'base-font-size': 'base font size',\n    'legacy-syntax': 'legacy syntax'\n  );\n\n  @each $legacy, $new in $legacyVars {\n    @if global-variable-exists('breakpoint-' + $legacy) {\n      @warn \"In order to avoid variable namspace collisions, we have updated the way to change settings for Breakpoint. Please change all instances of `$breakpoint-#{$legacy}: {{setting}}` to `@include breakpoint-set('#{$new}', {{setting}})`. Variable settings, as well as this warning will be deprecated in a future release.\"\n    }\n  };\n\n  //////////////////////////////\n  // Hand correct each setting\n  //////////////////////////////\n  @if global-variable-exists('breakpoint-default-media') and $breakpoint-default-media != breakpoint-get('default media') {\n    @include breakpoint-set('default media', $breakpoint-default-media);\n  }\n  @if global-variable-exists('breakpoint-default-feature') and $breakpoint-default-feature != breakpoint-get('default feature') {\n    @include breakpoint-set('default feature', $breakpoint-default-feature);\n  }\n  @if global-variable-exists('breakpoint-force-media-all') and $breakpoint-force-media-all != breakpoint-get('force all media type') {\n    @include breakpoint-set('force all media type', $breakpoint-force-media-all);\n  }\n  @if global-variable-exists('breakpoint-to-ems') and $breakpoint-to-ems != breakpoint-get('to ems') {\n    @include breakpoint-set('to ems', $breakpoint-to-ems);\n  }\n  @if global-variable-exists('breakpoint-resolutions') and $breakpoint-resolutions != breakpoint-get('transform resolutions') {\n    @include breakpoint-set('transform resolutions', $breakpoint-resolutions);\n  }\n  @if global-variable-exists('breakpoint-no-queries') and $breakpoint-no-queries != breakpoint-get('no queries') {\n    @include breakpoint-set('no queries', $breakpoint-no-queries);\n  }\n  @if global-variable-exists('breakpoint-no-query-fallbacks') and $breakpoint-no-query-fallbacks != breakpoint-get('no query fallbacks') {\n    @include breakpoint-set('no query fallbacks', $breakpoint-no-query-fallbacks);\n  }\n  @if global-variable-exists('breakpoint-base-font-size') and $breakpoint-base-font-size != breakpoint-get('base font size') {\n    @include breakpoint-set('base font size', $breakpoint-base-font-size);\n  }\n  @if global-variable-exists('breakpoint-legacy-syntax') and $breakpoint-legacy-syntax != breakpoint-get('legacy syntax') {\n    @include breakpoint-set('legacy syntax', $breakpoint-legacy-syntax);\n  }\n}","body {\n  @include padding(1);\n  background: #d5bfa3;\n  color: #261420;\n}\n\n.container {\n  @include padding(1);\n  @include margin(0 auto 1);\n  max-width: 1100px;\n  background: #F2E2CE;\n}\n\nh1, h2, h3 {\n  margin: 0;\n}\n\np {\n  margin: 0;\n}\n\nh1 {\n  color: #A6263E;\n}\n\nh2, h3 {\n  color: #0d7f70;\n}\n"],"mappings":"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","names":[],"sourceRoot":"/source/"}